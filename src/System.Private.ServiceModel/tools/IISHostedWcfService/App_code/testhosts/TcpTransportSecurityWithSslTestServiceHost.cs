// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
using System;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;

namespace WcfService
{
    public class TcpTransportSecurityWithSslTestServiceHostFactory : ServiceHostFactory
    {
        protected override ServiceHost CreateServiceHost(Type serviceType, Uri[] baseAddresses)
        {
            TcpTransportSecurityWithSslTestServiceHost serviceHost = new TcpTransportSecurityWithSslTestServiceHost(serviceType, baseAddresses);
            return serviceHost;
        }
    }
    public class TcpTransportSecurityWithSslTestServiceHost : TestServiceHostBase<IWcfService>
    {
        protected override string Address { get { return "tcp-server-ssl-security"; } }

        protected override Binding GetBinding()
        {
            return new CustomBinding(
                new SslStreamSecurityBindingElement(),
                new BinaryMessageEncodingBindingElement(),
                new TcpTransportBindingElement()
                );
        }

        protected override void ApplyConfiguration()
        {
            base.ApplyConfiguration();
            {
                string thumbprint = Util.CertificateFromFridendlyName(StoreName.My, StoreLocation.LocalMachine, "WCF Bridge - Machine certificate generated by the CertificateManager").Thumbprint;

                this.Credentials.ServiceCertificate.SetCertificate(StoreLocation.LocalMachine,
                                                          StoreName.My,
                                                          X509FindType.FindByThumbprint,
                                                          thumbprint);

                this.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.None;
            }
        }

        public TcpTransportSecurityWithSslTestServiceHost(Type serviceType, params Uri[] baseAddresses)
            : base(serviceType, baseAddresses)
        {
        }
    }
}
