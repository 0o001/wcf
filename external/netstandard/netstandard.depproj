<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <NETStandardVersion Condition="$(NuGetTargetMoniker.StartsWith('.NETStandard,Version=v'))">$(NuGetTargetMoniker.SubString(22))</NETStandardVersion>
    <IsNETStandard1x Condition="$(NETStandardVersion.StartsWith('1.'))">true</IsNETStandard1x>
    <IsNETStandard2x Condition="$(NETStandardVersion.StartsWith('2.'))">true</IsNETStandard2x>
    <BinPlaceRef>true</BinPlaceRef>
    <NuGetDeploySourceItem>Reference</NuGetDeploySourceItem>
    <NugetRuntimeIdentifier>None</NugetRuntimeIdentifier>
    <_NETStandardTFMFolder Condition="'$(NuGetTargetMoniker)' == '.NETStandard,Version=v2.0'">netstandard2.0</_NETStandardTFMFolder>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="NETStandard.Library">
      <Version>$(NETStandardPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="@(RefAndRuntimePackageReference)" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsNETStandard2x)' == 'true' or
                        '$(TargetGroup)' == 'uap'">
    <PackageReference Include="System.Reflection.DispatchProxy">
      <Version>$(MicrosoftPrivateCoreFxNETCoreAppPackageVersion)</Version>
    </PackageReference>

    <!--
      Always include these packages to compile against, even though their
      runtimes may not be included depending on configuration.
    -->
    <PackageReference Include="System.Security.Principal.Windows">
      <Version>$(MicrosoftPrivateCoreFxNETCoreAppPackageVersion)</Version>
    </PackageReference>
    <PackageReference Include="System.Net.Http.WinHttpHandler">
      <Version>$(MicrosoftPrivateCoreFxNETCoreAppPackageVersion)</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(IsNETStandard1x)' == 'true'">
    <PackageReference Include="System.Diagnostics.Contracts">
      <Version>4.3.0</Version>
    </PackageReference>
    <PackageReference Include="System.Diagnostics.Debug">
      <Version>4.3.0</Version>
    </PackageReference>
    <PackageReference Include="System.Dynamic.Runtime">
      <Version>4.3.0</Version>
    </PackageReference>
    <PackageReference Include="System.Runtime.Serialization.Primitives">
      <Version>4.3.0</Version>
    </PackageReference>
    <PackageReference Condition="'$(NETStandardVersion)' &gt;= 1.3" Include="System.Reflection.TypeExtensions">
      <Version>4.3.0</Version>
    </PackageReference>
    <PackageReference Condition="'$(NETStandardVersion)' &gt;= 1.2" Include="System.Data.SqlClient">
      <Version>4.3.0</Version>
    </PackageReference>
    <PackageReference Condition="'$(NETStandardVersion)' &gt;= 1.3" Include="System.Security.Cryptography.Cng">
      <Version>4.3.0</Version>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <!-- for all configurations this project provides refs for that configuration -->
    <BinPlaceConfiguration Include="$(Configuration)">
      <RefPath>$(RefPath)</RefPath>
    </BinPlaceConfiguration>
    <BinPlaceConfiguration Include="$(Configuration)">
      <!-- copy shims to the testhost as well in order to be able to run the netfx tests -->
      <RuntimePath>$(TestHostRootPath)</RuntimePath>
    </BinPlaceConfiguration>
  </ItemGroup>

  <Target Name="AddNETStandardRefs" AfterTargets="ResolveReferences"
          Condition="'$(_NETStandardTFMFolder)' != ''">
    <PropertyGroup>
      <_NETStandardRefFolder>$(PackagesDir)$(NETStandardPackageId.ToLower())\$(NETStandardPackageVersion)\build\$(_NETStandardTFMFolder)\ref</_NETStandardRefFolder>
    </PropertyGroup>
    <ItemGroup>
      <Reference Include="$(_NETStandardRefFolder)\*.dll">
        <Private>False</Private>
        <NuGetPackageId>$(NETStandardPackageId)</NuGetPackageId>
        <NuGetPackageVersion>$(NETStandardPackageVersion)</NuGetPackageVersion>
      </Reference>
    </ItemGroup>
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>
